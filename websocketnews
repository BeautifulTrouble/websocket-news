#!/usr/bin/env python
#encoding: utf-8

import autovenv
autovenv.run()

import atexit
import json
import multiprocessing
import time
import uuid
from collections import deque, namedtuple
from functools import partial

import bleach
import requests
import tweepy
import websocket
from bleach.sanitizer import Cleaner
from bleach.linkifier import LinkifyFilter
from tweepy.streaming import Stream, StreamListener
from SimpleWebSocketServer import SimpleWebSocketServer, WebSocket

from utils import (
    raise_hell,
    script_directory,
)

from config import (
    CONFIG_JSON_URL,
    NEWSFEED_ITEM_LIMIT,
    RECONFIGURE_SECONDS,
    TWITTER_CONSUMER_KEY,
    TWITTER_CONSUMER_SECRET,
    TWITTER_ACCESS_TOKEN,
    TWITTER_ACCESS_TOKEN_SECRET,
    WEBSOCKET_PORT,
)

CACHE_FILE = 'cache.json'

# Configuration parsed 
fallback_config = requests.get(CONFIG_JSON_URL).json()

# Push all news items through this ipc Queue
newsQ = multiprocessing.Queue()

# This merely serves to document the properties of news items
NewsItem = namedtuple('NewsItem', [
    'content', 
    'content_html',
    'follow_link',
    'image_http', 
    'image_https',
    'timestamp',
    'user_name', 
    'user_handle', 
    'user_link',
])


# So we can offer a safe HTML representation of news items
# TODO: Create custom filter to linkify #hashtags & @usernames
clean_html = Cleaner(filters=[LinkifyFilter]).clean


_ws_commands = {c: str(uuid.uuid4()) for c in [
    'new',
]}

def ws_command(cmd_name_or_instance, *, 
        token_getter=lambda inst: inst.request.headers['cookie']):
    '''
    This is an IPC mechanism which allows processes to signal a blocking
    websocket loop by exchanging random pregenerated uuid tokens representing
    commands which can then be managed by a handshake callback.

        to send a command:
            ws_command('reload_config')

        to receive an incoming command:
            ws_command(self, token_getter=lambda s: s.token)

    Keep in mind that the _ws_commands dictionary becomes effectively immutable
    after multiprocessing calls fork(). The uuid tokens must be pregenerated 
    in order to be shared between a sender and receiver
    '''

    # A command is being sent
    if isinstance(cmd_name_or_instance, str):
        cmd_name = cmd_name_or_instance
        if cmd_name not in _ws_commands:
            raise Exception('Unknown ws_command "{}"'.format(cmd_name))

        url = 'ws://localhost:{}'.format(WEBSOCKET_PORT)
        ws = websocket.create_connection(url, cookie=_ws_commands[cmd_name])
        time.sleep(.3)
        ws.close()

    # A command is being received
    elif not isinstance(cmd_name_or_instance, str):
        instance = cmd_name_or_instance
        # The token_getter function defaults to assuming an instance of 
        # SimpleWebSocketServer.WebSocket with token stored in a request 
        # header
        cmd_token = token_getter(instance)
        return ([k for k,v in _ws_commands.items() if cmd_token == v] or [''])[0]




class NewsfeedServer(WebSocket):
    # Connected clients 
    client_states = {}

    # Old items stored in this queue are discarded when queue is full
    news = deque(maxlen=NEWSFEED_ITEM_LIMIT)

    def __init__(self, *a, **kw):
        super().__init__(*a, **kw)

    @classmethod
    def save_cache(cls):
        with script_directory():
            try:
                with open(CACHE_FILE, 'w') as cache:
                    cache.write(json.dumps(list(cls.news)))
            except OSError: return
        print('Saved {} items to cache'.format(len(cls.news)))

    @classmethod
    def load_cache(cls):
        with script_directory():
            try:
                with open(CACHE_FILE) as cache:
                    cls.news.extend(json.loads(cache.read()))
            except OSError: return
        print('Loaded {} items from cache'.format(len(cls.news)))

    @raise_hell
    def handleConnected(self):
        '''
        Update the list of clients and send NEWSFEED_ITEM_LIMIT many messages
        '''
        # When other processes need to signal this server, they can create a
        # random uuid and attach it to the cookie header of a websocket connection
        if ws_command(self) == 'new':
            news_item = newsQ.get()
            self.news.append(news_item)
            recipient_count = 0
            for client, started in self.client_states.items():
                if started:
                    text = json.dumps([news_item])
                    client.sendMessage(text)
                    recipient_count += 1
            print('Sent "{}..." to {} recipients'.format(news_item['content'][:20], recipient_count))

        # A new client has connected so we add its instance to the client state
        # dict and set its state to False meaning "don't send it messages yet"
        else:
            self.client_states[self] = False

    @raise_hell
    def handleMessage(self):
        '''
        A client sends a message to begin receiving news posts
        '''
        # If the client has sent anything - "start", "ready", "yo!", we'll send
        # a list of messages from the class attribute news, a queue containing
        # NEWSFEED_ITEM_LIMIT many messages.
        text = json.dumps([*self.news])
        self.sendMessage(text)
        print('Sent {} items to new recipient'.format(len(self.news)))

        # Signify that this client is now in the started state
        self.client_states[self] = True

    @raise_hell
    def handleClose(self):
        self.client_states.pop(self, None)




class TwitterStreamListener(StreamListener):
    '''
    Collect tweets and alert the websocket server process (via a websocket)
    '''

    def __init__(self, *a, **kw):
        self.start_time = time.time()
        super().__init__(*a, **kw)

    def on_data(self, *a, **kw):
        '''
        Disconnect every RECONFIGURE_SECONDS so that the blocking call to 
        stream.filter() will return and we can update config data
        '''
        if time.time() - self.start_time >= RECONFIGURE_SECONDS:
            return False
        super().on_data(*a, **kw)

    def on_error(self, status_code):
        '''
        Disconnect on rate limit
        '''
        if status_code == 420:
            return False

    def on_status(self, status):
        '''
        Produce a json-string of the message and notify the websocket server
        to broadcast it to clients
        '''
        tweet = NewsItem(
            content=status.text,
            content_html=clean_html(status.text),
            follow_link='https://twitter.com/intent/follow?screen_name={}'.format(status.author.screen_name),
            image_http=status.author.profile_image_url,
            image_https=status.author.profile_image_url_https,
            timestamp=status.timestamp_ms,
            user_name=status.author.name,
            user_handle=status.author.screen_name,
            user_link='https://twitter.com/{}'.format(status.author.screen_name),
        )._asdict()
        newsQ.put(tweet)

        # Signal to the NewsfeedServer process that new data is in the queue
        ws_command('new')




def the_twitter_cycle():
    '''
    Instantiate a twitter stream listener which should terminate itself as
    often as it wants to check for new configuration data
    '''

    auth = tweepy.OAuthHandler(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
    auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET)
    api = tweepy.API(auth)

    # Repeatedly re-configure and initiate stream about every RECONFIGURE_SECONDS
    while True:
        try:
            config = requests.get(CONFIG_JSON_URL).json()
            print('Loaded twitter config')
        except requests.RequestException:
            config = fallback_config

        track = config.get('twitter', fallback_config.get('twitter', []))
        listener = TwitterStreamListener()
        stream = Stream(auth=api.auth, listener=listener)
        stream.filter(track=track)




if __name__ == '__main__':
    # Ensure that a restarted process has 
    NewsfeedServer.load_cache()
    atexit.register(NewsfeedServer.save_cache)

    # Start the blocking twitter listener process
    twitter = multiprocessing.Process(target=the_twitter_cycle)
    twitter.start()

    # Start the blocking websocket server in this process
    server = SimpleWebSocketServer('', WEBSOCKET_PORT, NewsfeedServer)
    server.serveforever()

